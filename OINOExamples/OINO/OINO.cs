using System;
using OINO;

namespace OINOExamples.OINO
{
   /// <summary>
   /// Immutable Person value object
   /// </summary>
   /// <remarks>
   ///   AutoGenerated from
   ///   /// <summary>
   ///   /// Immutable Person value object
   ///   /// </summary>
   ///   public class Person{
   ///      PersonName Name;
   ///      MailingAddress HomeAddress;
   ///      MailingAddress WorkAddress;
   ///      string PrimaryEmail;
   ///   }
   /// </remarks>
   public class Person : Value<Person>
   {
      public static class Fields
      {
         public static Symbol NameSymbol = new Symbol(typeof(Person).FullName, nameof(Name));
         public static readonly Field<Person, PersonName> Name =
            new Field<Person, PersonName>(NameSymbol, (person, @new) => person.WithName(@new), person => person.Name);

         public static Symbol HomeAddressSymbol = new Symbol(typeof(Person).FullName, nameof(HomeAddress));
         public static readonly Field<Person, MailingAddress> HomeAddress =
            new Field<Person, MailingAddress>(NameSymbol, (person, @new) => person.WithHomeAddress(@new), person => person.HomeAddress);

         public static Symbol WorkAddressSymbol = new Symbol(typeof(Person).FullName, nameof(WorkAddress));
         public static readonly Field<Person, MailingAddress> WorkAddress =
            new Field<Person, MailingAddress>(NameSymbol, (person, @new) => person.WithWorkAddress(@new), person => person.WorkAddress);

         public static Symbol PrimaryEmailSymbol = new Symbol(typeof(PersonName).FullName, nameof(PrimaryEmail));
         public static readonly Field<Person, string> PrimaryEmail =
            new Field<Person, string>(PrimaryEmailSymbol, (person, @new) => person.WithPrimaryEmail(@new), name => name.PrimaryEmail);
      }

      public PersonName Name { get; private set; }
      public Person WithName(PersonName name)
      {
         var @new = (Person)MemberwiseClone();
         @new.Name = name;
         return @new;
      }
      public Person UpdateName(Func<PersonName, PersonName> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.Name = transform(Name);
         return @new;
      }

      public MailingAddress HomeAddress { get; private set; }
      public Person WithHomeAddress(MailingAddress HomeAddress)
      {
         var @new = (Person)MemberwiseClone();
         @new.HomeAddress = HomeAddress;
         return @new;
      }
      public Person UpdateHomeAddress(Func<MailingAddress, MailingAddress> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.HomeAddress = transform(HomeAddress);
         return @new;
      }

      public MailingAddress WorkAddress { get; private set; }
      public Person WithWorkAddress(MailingAddress WorkAddress)
      {
         var @new = (Person)MemberwiseClone();
         @new.WorkAddress = WorkAddress;
         return @new;
      }
      public Person UpdateWorkAddress(Func<MailingAddress, MailingAddress> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.WorkAddress = transform(WorkAddress);
         return @new;
      }

      public string PrimaryEmail { get; private set; }
      public Person WithPrimaryEmail(string PrimaryEmail)
      {
         var @new = (Person)MemberwiseClone();
         @new.PrimaryEmail = PrimaryEmail;
         return @new;
      }
      public Person UpdatePrimaryEmail(Func<string, string> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.PrimaryEmail = transform(PrimaryEmail);
         return @new;
      }
   }

   public class PersonName : Value<PersonName>
   {
      public static class Fields
      {
         public static Symbol FirstNameSymbol = new Symbol(typeof(PersonName).FullName, nameof(FirstName));
         public static readonly Field<PersonName, string> FirstName =
            new Field<PersonName, string>(FirstNameSymbol, (name, @new) => name.WithFirstName(@new), name => name.FirstName);
         public static Symbol MiddleNameSymbol = new Symbol(typeof(PersonName).FullName, nameof(MiddleName));
         public static readonly Field<PersonName, string> MiddleName =
            new Field<PersonName, string>(MiddleNameSymbol, (name, @new) => name.WithMiddleName(@new), name => name.MiddleName);
         public static Symbol LastNameSymbol = new Symbol(typeof(PersonName).FullName, nameof(LastName));
         public static readonly Field<PersonName, string> LastName =
            new Field<PersonName, string>(LastNameSymbol, (name, @new) => name.WithLastName(@new), name => name.LastName);
      }

      public string FirstName { get; private set; }
      public PersonName WithFirstName(string FirstName)
      {
         var @new = (PersonName)MemberwiseClone();
         @new.FirstName = FirstName;
         return @new;
      }
      public PersonName UpdateFirstName(Func<string, string> transform)
      {
         var @new = (PersonName)MemberwiseClone();
         @new.FirstName = transform(FirstName);
         return @new;
      }

      public string MiddleName { get; private set; }
      public PersonName WithMiddleName(string MiddleName)
      {
         var @new = (PersonName)MemberwiseClone();
         @new.MiddleName = MiddleName;
         return @new;
      }
      public PersonName UpdateMiddleName(Func<string, string> transform)
      {
         var @new = (PersonName)MemberwiseClone();
         @new.MiddleName = transform(FirstName);
         return @new;
      }

      public string LastName { get; private set; }
      public PersonName WithLastName(string LastName)
      {
         var @new = (PersonName)MemberwiseClone();
         @new.LastName = LastName;
         return @new;
      }
      public PersonName UpdateLastName(Func<string, string> transform)
      {
         var @new = (PersonName)MemberwiseClone();
         @new.LastName = transform(LastName);
         return @new;
      }
   }

   public class MailingAddress : Value<MailingAddress>
   {
      public string StreetAddress { get; private set; }
      public MailingAddress WithStreetAddress(string StreetAddress)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.StreetAddress = StreetAddress;
         return @new;
      }
      public MailingAddress UpdateStreetAddress(Func<string, string> transform)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.StreetAddress = transform(StreetAddress);
         return @new;
      }

      public string StreetAddress2 { get; private set; }
      public MailingAddress WithStreetAddress2(string StreetAddress2)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.StreetAddress2 = StreetAddress2;
         return @new;
      }
      public MailingAddress UpdateStreetAddress2(Func<string, string> transform)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.StreetAddress2 = transform(StreetAddress2);
         return @new;
      }

      public string City { get; private set; }
      public MailingAddress WithCity(string City)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.City = City;
         return @new;
      }
      public MailingAddress UpdateCity(Func<string, string> transform)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.City = transform(City);
         return @new;
      }

      public string State { get; private set; }
      public MailingAddress WithState(string State)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.State = State;
         return @new;
      }
      public MailingAddress UpdateState(Func<string, string> transform)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.State = transform(State);
         return @new;
      }

      public string ZipCode { get; private set; }
      public MailingAddress WithZipCode(string ZipCode)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.ZipCode = ZipCode;
         return @new;
      }
      public MailingAddress UpdateZipCode(Func<string, string> transform)
      {
         var @new = (MailingAddress)MemberwiseClone();
         @new.ZipCode = transform(ZipCode);
         return @new;
      }
   }

}
