using System;
using Valuable;

namespace ConsoleExample
{
   /// <summary>
   /// Immutable Person value object
   /// </summary>
   /// <remarks>
   ///   AutoGenerated from
   ///   /// <summary>
   ///   /// Immutable Person value object
   ///   /// </summary>
   ///   public class Person{
   ///      PersonName Name;
   ///      MailingAddress HomeAddress;
   ///      MailingAddress WorkAddress;
   ///      string PrimaryEmail;
   ///   }
   /// </remarks>
   public class Person : Value<Person>
   {
      public static class Fields
      {
         public static Symbol NameSymbol = new Symbol(typeof(Person).FullName, nameof(Name));
         public static readonly Field<Person, PersonName> Name =
            new Field<Person, PersonName>(NameSymbol, (person, @new) => person.WithName(@new), person => person.Name);

         public static Symbol HomeAddressSymbol = new Symbol(typeof(Person).FullName, nameof(HomeAddress));
         public static readonly Field<Person, MailingAddress> HomeAddress =
            new Field<Person, MailingAddress>(HomeAddressSymbol, (person, @new) => person.WithHomeAddress(@new), person => person.HomeAddress);

         public static Symbol WorkAddressSymbol = new Symbol(typeof(Person).FullName, nameof(WorkAddress));
         public static readonly Field<Person, MailingAddress> WorkAddress =
            new Field<Person, MailingAddress>(WorkAddressSymbol, (person, @new) => person.WithWorkAddress(@new), person => person.WorkAddress);

         public static Symbol PrimaryEmailSymbol = new Symbol(typeof(PersonName).FullName, nameof(PrimaryEmail));
         public static readonly Field<Person, string> PrimaryEmail =
            new Field<Person, string>(PrimaryEmailSymbol, (person, @new) => person.WithPrimaryEmail(@new), name => name.PrimaryEmail);
      }

      public PersonName Name { get; private set; }
      public Person WithName(PersonName name)
      {
         var @new = (Person)MemberwiseClone();
         @new.Name = name;
         return @new;
      }
      public Person UpdateName(Func<PersonName, PersonName> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.Name = transform(Name);
         return @new;
      }

      public DateTimeOffset Birth { get; private set; }
      public Person WithBirth(DateTimeOffset birth)
      {
         var @new = (Person)MemberwiseClone();
         @new.Birth = birth;
         return @new;
      }
      public Person UpdateBirth(Func<DateTimeOffset, DateTimeOffset> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.Birth = transform(Birth);
         return @new;
      }

      public MailingAddress HomeAddress { get; private set; }
      public Person WithHomeAddress(MailingAddress HomeAddress)
      {
         var @new = (Person)MemberwiseClone();
         @new.HomeAddress = HomeAddress;
         return @new;
      }
      public Person UpdateHomeAddress(Func<MailingAddress, MailingAddress> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.HomeAddress = transform(HomeAddress);
         return @new;
      }

      public MailingAddress WorkAddress { get; private set; }
      public Person WithWorkAddress(MailingAddress WorkAddress)
      {
         var @new = (Person)MemberwiseClone();
         @new.WorkAddress = WorkAddress;
         return @new;
      }
      public Person UpdateWorkAddress(Func<MailingAddress, MailingAddress> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.WorkAddress = transform(WorkAddress);
         return @new;
      }

      public string PrimaryEmail { get; private set; }
      public Person WithPrimaryEmail(string PrimaryEmail)
      {
         var @new = (Person)MemberwiseClone();
         @new.PrimaryEmail = PrimaryEmail;
         return @new;
      }
      public Person UpdatePrimaryEmail(Func<string, string> transform)
      {
         var @new = (Person)MemberwiseClone();
         @new.PrimaryEmail = transform(PrimaryEmail);
         return @new;
      }
   }
}